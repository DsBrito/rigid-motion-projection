from PyQt5.QtWidgets import QDialog, QVBoxLayout, QTextEdit, QPushButton, QLabel, QHBoxLayout, QSpacerItem, QSizePolicy
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon

def TutorialPopup():
    # Criando a janela do popup
    popup = QDialog()
    popup.setWindowTitle("Tutorial")
    popup.resize(600, 400)  # Aumente o tamanho inicial da janela aqui (largura x altura)

    # Texto explicativo
    tutorial_text = (
        "<h1 style='text-align: center;'>Bem-vindo ao Sistema de Proje√ß√£o 3D</h1>"
        "<p>Este programa permite visualizar e manipular uma malha STL em 3D, ajustando par√¢metros da c√¢mera e do mundo. "
        "Veja como cada se√ß√£o funciona:</p>"
        "<h2>‚ùó Avisos</h2>"
        "<ul>"
        "<li><b>LOG:</b> Exibir√° um log no terminal sobre o estado deste sistema e altera√ß√µes enquanto estiver ativo.</li>"
        "<li><b>Fechar tutorial (em caso de n√£o escolha):</b> ser√° carregada a malha de urso </li>"
        "<li><b>Altera√ß√£o nos par√¢metros (update ou reset):</b> exibir√° um popup.</li>"
        "<li><b>Par√¢metros intr√≠secos fora do limite permitido:</b> exibir√°  um popup.</li>"
        "<li><b>Limites: </b></li>"
        "<ol>"
        "<li><b>Dist√¢ncia Focal:</b> (min: 1, max: 1000)</li>"
        "<li><b>Foco (dist_focal):</b> (min: 1, max: 1000)</li>"
        "<li><b>Centro da imagem (ccd_x,ccd_y):</b> (min: 10, max: 50)</li>"
        "<li><b>Coeficientes de escala (n_pixels_base):</b> (min: 640, max: 1920)</li>"
        "<li><b>Coeficientes de escala (n_pixels_altura):</b> (min: 480, max: 1080)</li>"
        "<li><b>√Çngulo s0 (s_theta):</b> (min: -1000, max: 1000)</li>"
        "</ol>"
        "</ul>"
        "<h2>‚öôÔ∏è Par√¢metros Dispon√≠veis</h2>"
        "<ul>"
        "<li><b> Transforma√ß√µes do Mundo:</b> Altera√ß√µes no posicionamento e rota√ß√£o do objeto 3D no espa√ßo.</li>"
        "<li><b> Transforma√ß√µes da C√¢mera:</b> Ajustes de posi√ß√£o e orienta√ß√£o da c√¢mera em rela√ß√£o ao objeto.</li>"
        "<li><b> Par√¢metros Intr√≠nsecos:</b> Configura√ß√µes da c√¢mera, como dist√¢ncia focal, dimens√µes do sensor e resolu√ß√£o.</li>"
        "</ul>"
        "<h2>üìä Interface Principal</h2>"
        "<ol>"
        "<li><b>Visualiza√ß√£o:</b> Gr√°ficos 3D e proje√ß√µes 2D da malha STL.</li>"
        "<li><b>Campos de Entrada:</b> Ajuste dos par√¢metros intr√≠nsecos, do mundo e da c√¢mera.</li>"
        "<li><b>Bot√µes Interativos:</b> Aplica√ß√£o de altera√ß√µes e visualiza√ß√£o dos resultados em tempo real.</li>"
        "</ol>"
        "<h2>üîç Explore e Experimente</h2>"
        "<p>Altere os par√¢metros na interface principal e observe os efeitos nos gr√°ficos em tempo real. "
        "Experimente diferentes configura√ß√µes para entender como cada par√¢metro afeta a proje√ß√£o 3D.</p>"
        "<h2>‚úîÔ∏è Escolha a malha a ser renderizada</h2>"
        "<p>Selecione abaixo a malha que deseja visualizar e manipular. Cada op√ß√£o representa um modelo 3D diferente. Experimente renderizar diferentes objetos para entender as funcionalidades do programa:</p>"
        
    )

    # Layout principal
    layout = QVBoxLayout()
    popup.setWindowTitle("Github: Dsbrito ~ Movimento de Corpo R√≠gido e Proje√ß√£o Perspectiva")
    popup.setWindowIcon(QIcon('./assets/img/icon.png'))
    # Adicionando um QLabel com texto formatado
    tutorial_label = QLabel(tutorial_text)
    tutorial_label.setWordWrap(True)  # Quebra de linha autom√°tica
    tutorial_label.setTextFormat(Qt.TextFormat.RichText)  # Permite HTML no texto
    layout.addWidget(tutorial_label)

    # Bot√µes de escolha de mesh
    mesh_buttons_layout = QHBoxLayout()

    # Caminhos para as meshes
    meshes = {
        "Urso": ('./assets/stl/urso.STL', "üêª"),
        "Mario": ('./assets/stl/mario.STL', "üßë‚ÄçüéÆ"),
        "Link Zelda": ('./assets/stl/link_zelda.STL', "üõ°Ô∏è"),
        "Megaman": ('./assets/stl/megaman.STL', "ü§ñ"),
        "Donkey Kong": ('./assets/stl/donkey_kong.STL', "ü¶ç")
    }

    # Vari√°vel para armazenar a escolha do usu√°rio
    chosen_mesh = {"path": None}

    # Fun√ß√£o para definir a mesh escolhida e fechar o popup
    def choose_mesh(mesh_path):
        chosen_mesh["path"] = mesh_path
        popup.accept()

    # Criar um bot√£o com √≠cone para cada mesh
    for mesh_name, (mesh_path, icon) in meshes.items():
        button = QPushButton(f"{icon} {mesh_name}")
        button.clicked.connect(lambda _, path=mesh_path: choose_mesh(path))
        mesh_buttons_layout.addWidget(button)

    # Adicionar espa√ßamento abaixo dos bot√µes
    spacer = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
    mesh_buttons_layout.addSpacerItem(spacer)

    layout.addLayout(mesh_buttons_layout)

    # Define o layout na janela
    popup.setLayout(layout)

    # Exibe o popup e espera o usu√°rio escolher
    popup.exec_()

    # Retorna a mesh escolhida
    return chosen_mesh["path"]
